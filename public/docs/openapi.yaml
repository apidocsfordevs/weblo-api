openapi: 3.0.3
info:
    title: 'Weblo API'
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://localhost'
paths:
    /api/register:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /api/login:
        post:
            summary: ''
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    /api/tags:
        get:
            summary: 'Display a list of tags.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: []
                                    links: { first: 'http://localhost/api/tags?page=1', last: 'http://localhost/api/tags?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: null, last_page: 1, path: 'http://localhost/api/tags', per_page: 25, to: null, total: 0 }
                                properties:
                                    data: { type: array, example: [] }
                                    links: { type: object, example: { first: 'http://localhost/api/tags?page=1', last: 'http://localhost/api/tags?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: null, last_page: 1, path: 'http://localhost/api/tags', per_page: 25, to: null, total: 0 } }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Store a newly created tag in the database.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    '/api/tags/{tag}':
        get:
            summary: 'Display the specified tag.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    error: 'Resource not found'
                                properties:
                                    error: { type: string, example: 'Resource not found' }
            tags:
                - Endpoints
            security: []
        put:
            summary: 'Update the specified tag in the database.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        delete:
            summary: 'Remove the specified tag from the database.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: tag
                description: ''
                example: corrupti
                required: true
                schema:
                    type: string
    /api/posts:
        get:
            summary: 'Display a list of posts.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: []
                                    links: { first: 'http://localhost/api/posts?page=1', last: 'http://localhost/api/posts?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: null, last_page: 1, path: 'http://localhost/api/posts', per_page: 25, to: null, total: 0 }
                                properties:
                                    data: { type: array, example: [] }
                                    links: { type: object, example: { first: 'http://localhost/api/posts?page=1', last: 'http://localhost/api/posts?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: null, last_page: 1, path: 'http://localhost/api/posts', per_page: 25, to: null, total: 0 } }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Store a newly created resource in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
    '/api/posts/{post}':
        get:
            summary: 'Display the specified post.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    error: 'Resource not found'
                                properties:
                                    error: { type: string, example: 'Resource not found' }
            tags:
                - Endpoints
            security: []
        put:
            summary: 'Update the specified post in the database.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        delete:
            summary: 'Remove the specified post from the database.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: post
                description: ''
                example: voluptatibus
                required: true
                schema:
                    type: string
    '/api/posts/{post}/comments':
        get:
            summary: 'Display a list of comments for the specified post.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                404:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    error: 'Resource not found'
                                properties:
                                    error: { type: string, example: 'Resource not found' }
            tags:
                - Endpoints
            security: []
        post:
            summary: 'Store a newly created comment in the database.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: post
                description: ''
                example: excepturi
                required: true
                schema:
                    type: string
    '/api/posts/{post}/comments/{comment}':
        put:
            summary: 'Update the specified comment in the database'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses: {  }
            tags:
                - Endpoints
            security: []
        parameters:
            -
                in: path
                name: post
                description: ''
                example: fuga
                required: true
                schema:
                    type: string
            -
                in: path
                name: comment
                description: ''
                example: dolores
                required: true
                schema:
                    type: string
